commit c2ed8138d26a4afac2d3d783f7b1ad153ae967f1
Author: HssainAzaqy135 <kinghssain135@gmail.com>
Date:   Thu Dec 19 19:14:23 2024 +0200

    Update dry.pdf

diff --git a/dry/dry.pdf b/dry/dry.pdf
index b922c17..9843cb6 100644
Binary files a/dry/dry.pdf and b/dry/dry.pdf differ

commit 8f6dd39a3c4031dd1912c55e7b80bad60ea82d25
Author: HssainAzaqy135 <kinghssain135@gmail.com>
Date:   Thu Dec 19 19:13:10 2024 +0200

    Finish Dry Code

diff --git a/dry/Pirate.cpp b/dry/Pirate.cpp
index 7f23bbf..1f394df 100755
--- a/dry/Pirate.cpp
+++ b/dry/Pirate.cpp
@@ -1,46 +1,48 @@
 
 #include "Pirate.h"
 
-const char* const devilFruitNames[] = {
+const char *const devilFruitNames[] = {
     "Gum Gum",
     "Smoke Smoke",
     "Flame Flame",
     "Rumble Rumble",
     "String String",
     "Ice Ice",
-    "None"
-};
+    "None"};
 
-Pirate::Pirate(const string &name, const int &bounty, DEVIL_FRUIT devilFruit) : name(name), bounty(bounty),devilFruit(DEVIL_FRUIT::NONE) {}
+Pirate::Pirate(const string &name, const int &bounty, DEVIL_FRUIT devilFruit) : name(name), bounty(bounty), devilFruit(devilFruit) {}
 
-void Pirate::setName(const string& name){
+void Pirate::setName(const string &name)
+{
     this->name = name;
 }
 
-
-void Pirate::setDevilFruit(DEVIL_FRUIT devilFruit){
+void Pirate::setDevilFruit(DEVIL_FRUIT devilFruit)
+{
     this->devilFruit = devilFruit;
 }
 
-
-std::string Pirate::getName(){
-    return name;
+std::string Pirate::getName()
+{
+    return this->name;
 }
 
-
-void Pirate::setBounty(const int& bounty) {
+void Pirate::setBounty(const int &bounty)
+{
     this->bounty = bounty;
 }
-int Pirate::getBounty() {
-    return bounty;
+int Pirate::getBounty()
+{
+    return this->bounty;
 }
 
-std::ostream &operator<<(std::ostream &os, const Pirate &pirate){
-os << pirate.name << " (Devil Fruit: " << devilFruitNames[pirate.devilFruit] << ")" << " Bounty: " << pirate.bounty<< std::endl;
+std::ostream &operator<<(std::ostream &os, const Pirate &pirate)
+{
+    os << pirate.name << " (Devil Fruit: " << devilFruitNames[pirate.devilFruit] << ")" << " Bounty: " << pirate.bounty << std::endl;
+    return os;
 }
 
-DEVIL_FRUIT Pirate::getDevilFruit(){
-    return devilFruit;
+DEVIL_FRUIT Pirate::getDevilFruit()
+{
+    return this->devilFruit;
 }
-
-
diff --git a/dry/Pirate.h b/dry/Pirate.h
index b582fff..19fae9b 100644
--- a/dry/Pirate.h
+++ b/dry/Pirate.h
@@ -5,7 +5,8 @@
 
 using std::string;
 
-enum DEVIL_FRUIT {
+enum DEVIL_FRUIT
+{
     GUM_GUM_FRUIT,
     SMOKE_SMOKE_FRUIT,
     FLAME_FLAME_FRUIT,
@@ -23,18 +24,18 @@ private:
     DEVIL_FRUIT devilFruit;
 
 public:
-    Pirate() : name(""), bounty(0),devilFruit(DEVIL_FRUIT::NONE) {} // To fix compilation error
+    Pirate() : name(""), bounty(0), devilFruit(DEVIL_FRUIT::NONE) {} // To fix compilation error
     Pirate(const string &name, const int &bounty = 0, DEVIL_FRUIT devilFruit = DEVIL_FRUIT::NONE);
 
     ~Pirate() = default;
 
     void setName(const string &name);
     void setBounty(const int &bounty);
-    int getBounty();    void setDevilFruit(DEVIL_FRUIT devilFruit);
+    int getBounty();
+    void setDevilFruit(DEVIL_FRUIT devilFruit);
 
     string getName();
     DEVIL_FRUIT getDevilFruit();
-    void setDevilFruit(DEVIL_FRUIT devilFruit);
 
     friend std::ostream &operator<<(std::ostream &os, const Pirate &pirate);
 };
diff --git a/dry/Pirates b/dry/Pirates
new file mode 100644
index 0000000..b3b3c0e
Binary files /dev/null and b/dry/Pirates differ
diff --git a/dry/dry.docx b/dry/dry.docx
new file mode 100644
index 0000000..d9ba07e
Binary files /dev/null and b/dry/dry.docx differ
diff --git a/dry/dry.pdf b/dry/dry.pdf
new file mode 100644
index 0000000..b922c17
Binary files /dev/null and b/dry/dry.pdf differ
diff --git a/dry/log.txt b/dry/log.txt
new file mode 100644
index 0000000..97de770
--- /dev/null
+++ b/dry/log.txt
@@ -0,0 +1,596 @@
+commit b1de1662e700ea3d9ccfde699cfc5927b41f65f4
+Author: minmaxmarty <aregmkhitaryan@gmail.com>
+Date:   Thu Dec 19 18:45:20 2024 +0200
+
+    merge devil_fruit branch to master branch
+
+diff --git a/dry/.vscode/settings.json b/dry/.vscode/settings.json
+new file mode 100644
+index 0000000..ce48fa6
+--- /dev/null
++++ b/dry/.vscode/settings.json
+@@ -0,0 +1,5 @@
++{
++    "files.associations": {
++        "iosfwd": "cpp"
++    }
++}
+\ No newline at end of file
+
+commit a63358471f94fbd611fab1b9fe961d7618f4a8ff
+Merge: a086336 67a9926
+Author: minmaxmarty <aregmkhitaryan@gmail.com>
+Date:   Thu Dec 19 18:44:57 2024 +0200
+
+    Merge branch 'devil_fruit'
+
+commit a08633677b8fef73a316d078a0c86ad7dbb8422b
+Merge: a16ce05 64bd0be
+Author: minmaxmarty <aregmkhitaryan@gmail.com>
+Date:   Thu Dec 19 18:08:30 2024 +0200
+
+    Merge branch 'master' of https://github.com/HssainAzaqy135/HW2_2425A
+
+commit 64bd0bedc790f96afe31f3728c5069087b5ca046
+Author: HssainAzaqy135 <kinghssain135@gmail.com>
+Date:   Thu Dec 19 18:00:54 2024 +0200
+
+    [Feature] Add bounty feature to pirate
+
+diff --git a/dry/Pirate.cpp b/dry/Pirate.cpp
+index c96892e..86ddbd0 100755
+--- a/dry/Pirate.cpp
++++ b/dry/Pirate.cpp
+@@ -15,7 +15,15 @@ std::string Pirate::getName(){
+ }
+ 
+ 
++void Pirate::setBounty(const int& bounty) {
++    this->bounty = bounty;
++}
++int Pirate::getBounty() {
++    return bounty;
++}
++
+ std::ostream &operator<<(std::ostream &os, const Pirate &pirate){
+     os << pirate.name;
++    os << pirate.bounty;
+     return os;
+ }
+diff --git a/dry/main.cpp b/dry/main.cpp
+index 6b659a1..533f58a 100755
+--- a/dry/main.cpp
++++ b/dry/main.cpp
+@@ -7,8 +7,8 @@ using std::cout, std::endl;
+ 
+ int main() {
+ 
+-    Pirate luffy("Luffy");
+-    Pirate zoro("Zoro");
++    Pirate luffy("Luffy",1000000);
++    Pirate zoro("Zoro",500000);
+ 
+     const int crewSize = 2;
+     
+
+commit aee198300ddfd06b07478fa3b7537d1d7b496564
+Author: HssainAzaqy135 <kinghssain135@gmail.com>
+Date:   Thu Dec 19 18:04:27 2024 +0200
+
+    Update Pirate.h to fix compilation error
+
+diff --git a/dry/Pirate.h b/dry/Pirate.h
+old mode 100755
+new mode 100644
+index 7769667..71dbe76
+--- a/dry/Pirate.h
++++ b/dry/Pirate.h
+@@ -5,17 +5,22 @@
+ 
+ using std::string;
+ 
+-class Pirate {
++class Pirate
++{
+ private:
+     string name;
++    int bounty;
+ 
+ public:
+-    Pirate(const string& name);
++    Pirate() : name(""), bounty(0) {} // To fix compilation error
++    Pirate(const string &name, const int &bounty) : name(name), bounty(bounty) {}
++    Pirate(const string &name);
+ 
+     ~Pirate() = default;
+ 
+-    void setName(const string& name);
+-
++    void setName(const string &name);
++    void setBounty(const int &bounty);
++    int getBounty();
+     string getName();
+ 
+     friend std::ostream &operator<<(std::ostream &os, const Pirate &pirate);
+
+commit a16ce05297552ffcabb8b4cfc04c71ecb38757c7
+Author: HssainAzaqy135 <kinghssain135@gmail.com>
+Date:   Thu Dec 19 18:00:54 2024 +0200
+
+    [Feature] Add bounty feature to pirate
+
+diff --git a/dry/Pirate.cpp b/dry/Pirate.cpp
+index c96892e..86ddbd0 100755
+--- a/dry/Pirate.cpp
++++ b/dry/Pirate.cpp
+@@ -15,7 +15,15 @@ std::string Pirate::getName(){
+ }
+ 
+ 
++void Pirate::setBounty(const int& bounty) {
++    this->bounty = bounty;
++}
++int Pirate::getBounty() {
++    return bounty;
++}
++
+ std::ostream &operator<<(std::ostream &os, const Pirate &pirate){
+     os << pirate.name;
++    os << pirate.bounty;
+     return os;
+ }
+diff --git a/dry/Pirate.h b/dry/Pirate.h
+index 7769667..2b4f386 100755
+--- a/dry/Pirate.h
++++ b/dry/Pirate.h
+@@ -8,14 +8,18 @@ using std::string;
+ class Pirate {
+ private:
+     string name;
++    int bounty;
+ 
+ public:
++    Pirate():name(""),bounty(0){}
++    Pirate(const string &name,const int& bounty):name(name),bounty(bounty){}
+     Pirate(const string& name);
+ 
+     ~Pirate() = default;
+ 
+     void setName(const string& name);
+-
++    void setBounty(const int& bounty);
++    int getBounty();
+     string getName();
+ 
+     friend std::ostream &operator<<(std::ostream &os, const Pirate &pirate);
+diff --git a/dry/main.cpp b/dry/main.cpp
+index 6b659a1..533f58a 100755
+--- a/dry/main.cpp
++++ b/dry/main.cpp
+@@ -7,8 +7,8 @@ using std::cout, std::endl;
+ 
+ int main() {
+ 
+-    Pirate luffy("Luffy");
+-    Pirate zoro("Zoro");
++    Pirate luffy("Luffy",1000000);
++    Pirate zoro("Zoro",500000);
+ 
+     const int crewSize = 2;
+     
+
+commit 67a992620c204243a3c94749804df35fcebbf6d3
+Author: Baraa Egbaria <mohammadegbaria@Mohammads-MacBook-Pro.local>
+Date:   Fri Dec 13 02:44:01 2024 +0200
+
+    [Feature] Add devil fruit feature
+
+diff --git a/dry/Pirate.cpp b/dry/Pirate.cpp
+index c96892e..fc3c314 100755
+--- a/dry/Pirate.cpp
++++ b/dry/Pirate.cpp
+@@ -2,7 +2,7 @@
+ #include "Pirate.h"
+ 
+ 
+-Pirate::Pirate(const string& name): name(name) {}
++Pirate::Pirate(const string& name, DEVIL_FRUIT devilFruit): name(name), devilFruit(devilFruit) {}
+ 
+ 
+ void Pirate::setName(const string& name){
+@@ -10,12 +10,32 @@ void Pirate::setName(const string& name){
+ }
+ 
+ 
++void Pirate::setDevilFruit(DEVIL_FRUIT devilFruit){
++    this->devilFruit = devilFruit;
++}
++
++
+ std::string Pirate::getName(){
+     return name;
+ }
+ 
+ 
++DEVIL_FRUIT Pirate::getDevilFruit(){
++    return devilFruit;
++}
++
++
++const char* const devilFruitNames[] = {
++    "Gum Gum",
++    "Smoke Smoke",
++    "Flame Flame",
++    "Rumble Rumble",
++    "String String",
++    "Ice Ice",
++    "None"
++};
++
+ std::ostream &operator<<(std::ostream &os, const Pirate &pirate){
+-    os << pirate.name;
++    os << pirate.name << " (Devil Fruit: " << devilFruitNames[pirate.devilFruit] << ")";
+     return os;
+ }
+diff --git a/dry/Pirate.h b/dry/Pirate.h
+index 7769667..4c044b1 100755
+--- a/dry/Pirate.h
++++ b/dry/Pirate.h
+@@ -5,18 +5,31 @@
+ 
+ using std::string;
+ 
++enum DEVIL_FRUIT {
++    GUM_GUM_FRUIT,
++    SMOKE_SMOKE_FRUIT,
++    FLAME_FLAME_FRUIT,
++    RUMBLE_RUMBLE_FRUIT,
++    STRING_STRING_FRUIT,
++    ICE_ICE_FRUIT,
++    NONE
++};
++
+ class Pirate {
+ private:
+     string name;
++    DEVIL_FRUIT devilFruit;
+ 
+ public:
+-    Pirate(const string& name);
++    Pirate(const string& name, DEVIL_FRUIT devilFruit = DEVIL_FRUIT::NONE);
+ 
+     ~Pirate() = default;
+ 
+     void setName(const string& name);
++    void setDevilFruit(DEVIL_FRUIT devilFruit);
+ 
+     string getName();
++    DEVIL_FRUIT getDevilFruit();
+ 
+     friend std::ostream &operator<<(std::ostream &os, const Pirate &pirate);
+ };
+diff --git a/dry/main.cpp b/dry/main.cpp
+index 6b659a1..2911f71 100755
+--- a/dry/main.cpp
++++ b/dry/main.cpp
+@@ -7,7 +7,7 @@ using std::cout, std::endl;
+ 
+ int main() {
+ 
+-    Pirate luffy("Luffy");
++    Pirate luffy("Luffy", GUM_GUM_FRUIT);
+     Pirate zoro("Zoro");
+ 
+     const int crewSize = 2;
+
+commit 74f6b97bc53ce50d65642ddedae20581be903ddf
+Author: Baraa Egbaria <mohammadegbaria@Mohammads-MacBook-Pro.local>
+Date:   Fri Dec 13 02:41:38 2024 +0200
+
+    Initial Commit
+
+diff --git a/README.md b/README.md
+new file mode 100644
+index 0000000..0a4b9a1
+--- /dev/null
++++ b/README.md
+@@ -0,0 +1,7 @@
++# Matam Homework 2
++
++This repository contains all supplied files for the second homework assignment in the course "Introduction to Systems Programming" (234124) at the Technion.
++
++You may find the full instructions for this assignment on the [course's website](https://webcourse.cs.technion.ac.il/02340124/Winter2024-2025).
++
++Good luck and have fun!
+diff --git a/dry/Pirate.cpp b/dry/Pirate.cpp
+new file mode 100755
+index 0000000..c96892e
+--- /dev/null
++++ b/dry/Pirate.cpp
+@@ -0,0 +1,21 @@
++
++#include "Pirate.h"
++
++
++Pirate::Pirate(const string& name): name(name) {}
++
++
++void Pirate::setName(const string& name){
++    this->name = name;
++}
++
++
++std::string Pirate::getName(){
++    return name;
++}
++
++
++std::ostream &operator<<(std::ostream &os, const Pirate &pirate){
++    os << pirate.name;
++    return os;
++}
+diff --git a/dry/Pirate.h b/dry/Pirate.h
+new file mode 100755
+index 0000000..7769667
+--- /dev/null
++++ b/dry/Pirate.h
+@@ -0,0 +1,22 @@
++
++#pragma once
++
++#include <iostream>
++
++using std::string;
++
++class Pirate {
++private:
++    string name;
++
++public:
++    Pirate(const string& name);
++
++    ~Pirate() = default;
++
++    void setName(const string& name);
++
++    string getName();
++
++    friend std::ostream &operator<<(std::ostream &os, const Pirate &pirate);
++};
+diff --git a/dry/main.cpp b/dry/main.cpp
+new file mode 100755
+index 0000000..6b659a1
+--- /dev/null
++++ b/dry/main.cpp
+@@ -0,0 +1,25 @@
++#include <iostream>
++#include "Pirate.h"
++#include <cstring>
++
++using std::cout, std::endl;
++
++
++int main() {
++
++    Pirate luffy("Luffy");
++    Pirate zoro("Zoro");
++
++    const int crewSize = 2;
++    
++    Pirate strawHatCrew[2];
++    strawHatCrew[0] = luffy;
++    strawHatCrew[1] = zoro;
++    
++    cout << "Straw Hat crew contains:" << endl;
++    for (int i = 0; i < crewSize; i++) {
++        cout << strawHatCrew[i] << endl;
++    }
++
++    return 0;
++}
+diff --git a/wet/Utilities.cpp b/wet/Utilities.cpp
+new file mode 100755
+index 0000000..c35944f
+--- /dev/null
++++ b/wet/Utilities.cpp
+@@ -0,0 +1,23 @@
++
++#include "Utilities.h"
++
++#include <iostream>
++
++using std::cerr;
++
++
++void exitWithError(MatamErrorType error) {
++    std::cerr << "Matam Error: ";
++    switch (error) {
++        case MatamErrorType::UnmatchedSizes:
++            std::cerr << "Unmatched matrices" << std::endl;
++            break;
++        case MatamErrorType::OutOfBounds:
++            std::cerr << "Out of bounds" << std::endl;
++            break;
++        case MatamErrorType::NotSquareMatrix:
++            std::cerr << "Matrix must be square to calculate determinant" << std::endl;
++            break;
++    }
++    exit(1);
++}
+diff --git a/wet/Utilities.h b/wet/Utilities.h
+new file mode 100755
+index 0000000..c07958d
+--- /dev/null
++++ b/wet/Utilities.h
+@@ -0,0 +1,10 @@
++
++#pragma once
++
++enum class MatamErrorType {
++    UnmatchedSizes,
++    OutOfBounds,
++    NotSquareMatrix
++};
++
++void exitWithError(MatamErrorType error);
+diff --git a/wet/test.expected b/wet/test.expected
+new file mode 100755
+index 0000000..d107ab8
+--- /dev/null
++++ b/wet/test.expected
+@@ -0,0 +1,19 @@
++|5|6|
++|7|8|
++
++Movie Name: MataMatrix
++Author: Baraa Egbaria
++
++Frame 0:
++|1|2|
++|3|4|
++
++Frame 1:
++|5|6|
++|7|8|
++
++Frame 2:
++|1|2|
++|3|4|
++
++-----End of Movie-----
+diff --git a/wet/tests.cpp b/wet/tests.cpp
+new file mode 100755
+index 0000000..d8bc5a7
+--- /dev/null
++++ b/wet/tests.cpp
+@@ -0,0 +1,130 @@
++
++
++#include <string>
++#include <iostream>
++
++#include "Matrix.h"
++#include "MataMvidia.h"
++
++using namespace std;
++typedef bool (*testFunc)(void);
++
++bool testMatrix(std::ostream& out);
++bool testMataMvidia(std::ostream& out);
++
++
++#define ASSERT_TEST(expr)                                                      \
++do {                                                                           \
++    if (!(expr)) {                                                             \
++        std::cout << "\nAssertion failed at ";                                 \
++        std::cout << __FILE__ << ":" << __LINE__ << ": " << #expr << std::endl;\
++        exit(1);                                                               \
++    }                                                                          \
++} while (0)
++
++
++int main() {
++    testMatrix(std::cout);
++    testMataMvidia(std::cout);
++    return 0;
++}
++
++bool testMatrix(std::ostream& out) {
++    Matrix m1(2,2);
++    Matrix m2(2,2);
++
++    m1(0,0) = 1;
++    m1(0,1) = 2;
++    m1(1,0) = 3;
++    m1(1,1) = 4;
++
++    m2(0,0) = 5;
++    m2(0,1) = 6;
++    m2(1,0) = 7;
++    m2(1,1) = 8;
++
++    Matrix m3 = m1 + m2;
++    ASSERT_TEST(m3(0,0) == 6);
++    ASSERT_TEST(m3(0,1) == 8);
++    ASSERT_TEST(m3(1,0) == 10);
++    ASSERT_TEST(m3(1,1) == 12);
++
++    Matrix m4 = m1 * m2;
++    m4 *= 1;
++    ASSERT_TEST(m4(0,0) == 19);
++    ASSERT_TEST(m4(0,1) == 22);
++    ASSERT_TEST(m4(1,0) == 43);
++    ASSERT_TEST(m4(1,1) == 50);
++
++    m1 += m2;
++    m1 *= m2;
++    m1 -= m2;
++    m1 = m3 - m2;
++
++    ASSERT_TEST(-m1 == -1*m1);
++    ASSERT_TEST(-m1 == m1*-1);
++
++    ASSERT_TEST(m2.rotateClockwise().rotateCounterClockwise() == m2);
++
++    ASSERT_TEST(m1.transpose().transpose() == m1);
++
++    out << m2 << std::endl;
++
++    return true;
++}
++
++bool testMataMvidia(std::ostream& out) {
++    Matrix frame1(2,2);
++    Matrix frame2(2,2);
++
++    frame1(0,0) = 1;
++    frame1(0,1) = 2;
++    frame1(1,0) = 3;
++    frame1(1,1) = 4;
++
++    frame2(0,0) = 5;
++    frame2(0,1) = 6;
++    frame2(1,0) = 7;
++    frame2(1,1) = 8;
++
++    Matrix array[2];
++    array[0] = frame1;
++    array[1] = frame2;
++
++    MataMvidia movie("MataMatrix","Baraa Egbaria",array, 2);
++
++    ASSERT_TEST(movie[0] == frame1);
++
++    movie += frame1;
++
++    ASSERT_TEST(movie[2] == frame1);
++
++    Matrix frame01(2,2);
++    Matrix frame11(2,2);
++
++    frame01(0,0) = 10;
++    frame01(0,1) = 20;
++    frame01(1,0) = 30;
++    frame01(1,1) = 40;
++
++    frame11(0,0) = 50;
++    frame11(0,1) = 60;
++    frame11(1,0) = 70;
++    frame11(1,1) = 80;
++
++    Matrix array1[2];
++    array1[0] = frame01;
++    array1[1] = frame11;
++
++    MataMvidia movie1("MataMatrix and the chamber of secrets","Baraa Egbaria",array1, 2);
++
++    ASSERT_TEST(movie1[0] == frame01);
++
++    //test output
++    out << movie;
++
++    MataMvidia movie2 = movie + movie1;
++    movie += movie1;
++
++    return true;
++}
diff --git a/dry/main.cpp b/dry/main.cpp
index c3690ba..dee1e14 100755
--- a/dry/main.cpp
+++ b/dry/main.cpp
@@ -4,20 +4,21 @@
 
 using std::cout, std::endl;
 
+int main()
+{
 
-int main() {
-
-    Pirate luffy("Luffy",1000000, GUM_GUM_FRUIT);
-    Pirate zoro("Zoro",500000);
+    Pirate luffy("Luffy", 1000000, GUM_GUM_FRUIT);
+    Pirate zoro("Zoro", 500000);
 
     const int crewSize = 2;
-    
+
     Pirate strawHatCrew[2];
     strawHatCrew[0] = luffy;
     strawHatCrew[1] = zoro;
-    
+
     cout << "Straw Hat crew contains:" << endl;
-    for (int i = 0; i < crewSize; i++) {
+    for (int i = 0; i < crewSize; i++)
+    {
         cout << strawHatCrew[i] << endl;
     }
 

commit b1de1662e700ea3d9ccfde699cfc5927b41f65f4
Author: minmaxmarty <aregmkhitaryan@gmail.com>
Date:   Thu Dec 19 18:45:20 2024 +0200

    merge devil_fruit branch to master branch

diff --git a/dry/.vscode/settings.json b/dry/.vscode/settings.json
new file mode 100644
index 0000000..ce48fa6
--- /dev/null
+++ b/dry/.vscode/settings.json
@@ -0,0 +1,5 @@
+{
+    "files.associations": {
+        "iosfwd": "cpp"
+    }
+}
\ No newline at end of file

commit a63358471f94fbd611fab1b9fe961d7618f4a8ff
Merge: a086336 67a9926
Author: minmaxmarty <aregmkhitaryan@gmail.com>
Date:   Thu Dec 19 18:44:57 2024 +0200

    Merge branch 'devil_fruit'

commit a08633677b8fef73a316d078a0c86ad7dbb8422b
Merge: a16ce05 64bd0be
Author: minmaxmarty <aregmkhitaryan@gmail.com>
Date:   Thu Dec 19 18:08:30 2024 +0200

    Merge branch 'master' of https://github.com/HssainAzaqy135/HW2_2425A

commit 64bd0bedc790f96afe31f3728c5069087b5ca046
Author: HssainAzaqy135 <kinghssain135@gmail.com>
Date:   Thu Dec 19 18:00:54 2024 +0200

    [Feature] Add bounty feature to pirate

diff --git a/dry/Pirate.cpp b/dry/Pirate.cpp
index c96892e..86ddbd0 100755
--- a/dry/Pirate.cpp
+++ b/dry/Pirate.cpp
@@ -15,7 +15,15 @@ std::string Pirate::getName(){
 }
 
 
+void Pirate::setBounty(const int& bounty) {
+    this->bounty = bounty;
+}
+int Pirate::getBounty() {
+    return bounty;
+}
+
 std::ostream &operator<<(std::ostream &os, const Pirate &pirate){
     os << pirate.name;
+    os << pirate.bounty;
     return os;
 }
diff --git a/dry/main.cpp b/dry/main.cpp
index 6b659a1..533f58a 100755
--- a/dry/main.cpp
+++ b/dry/main.cpp
@@ -7,8 +7,8 @@ using std::cout, std::endl;
 
 int main() {
 
-    Pirate luffy("Luffy");
-    Pirate zoro("Zoro");
+    Pirate luffy("Luffy",1000000);
+    Pirate zoro("Zoro",500000);
 
     const int crewSize = 2;
     

commit aee198300ddfd06b07478fa3b7537d1d7b496564
Author: HssainAzaqy135 <kinghssain135@gmail.com>
Date:   Thu Dec 19 18:04:27 2024 +0200

    Update Pirate.h to fix compilation error

diff --git a/dry/Pirate.h b/dry/Pirate.h
old mode 100755
new mode 100644
index 7769667..71dbe76
--- a/dry/Pirate.h
+++ b/dry/Pirate.h
@@ -5,17 +5,22 @@
 
 using std::string;
 
-class Pirate {
+class Pirate
+{
 private:
     string name;
+    int bounty;
 
 public:
-    Pirate(const string& name);
+    Pirate() : name(""), bounty(0) {} // To fix compilation error
+    Pirate(const string &name, const int &bounty) : name(name), bounty(bounty) {}
+    Pirate(const string &name);
 
     ~Pirate() = default;
 
-    void setName(const string& name);
-
+    void setName(const string &name);
+    void setBounty(const int &bounty);
+    int getBounty();
     string getName();
 
     friend std::ostream &operator<<(std::ostream &os, const Pirate &pirate);

commit a16ce05297552ffcabb8b4cfc04c71ecb38757c7
Author: HssainAzaqy135 <kinghssain135@gmail.com>
Date:   Thu Dec 19 18:00:54 2024 +0200

    [Feature] Add bounty feature to pirate

diff --git a/dry/Pirate.cpp b/dry/Pirate.cpp
index c96892e..86ddbd0 100755
--- a/dry/Pirate.cpp
+++ b/dry/Pirate.cpp
@@ -15,7 +15,15 @@ std::string Pirate::getName(){
 }
 
 
+void Pirate::setBounty(const int& bounty) {
+    this->bounty = bounty;
+}
+int Pirate::getBounty() {
+    return bounty;
+}
+
 std::ostream &operator<<(std::ostream &os, const Pirate &pirate){
     os << pirate.name;
+    os << pirate.bounty;
     return os;
 }
diff --git a/dry/Pirate.h b/dry/Pirate.h
index 7769667..2b4f386 100755
--- a/dry/Pirate.h
+++ b/dry/Pirate.h
@@ -8,14 +8,18 @@ using std::string;
 class Pirate {
 private:
     string name;
+    int bounty;
 
 public:
+    Pirate():name(""),bounty(0){}
+    Pirate(const string &name,const int& bounty):name(name),bounty(bounty){}
     Pirate(const string& name);
 
     ~Pirate() = default;
 
     void setName(const string& name);
-
+    void setBounty(const int& bounty);
+    int getBounty();
     string getName();
 
     friend std::ostream &operator<<(std::ostream &os, const Pirate &pirate);
diff --git a/dry/main.cpp b/dry/main.cpp
index 6b659a1..533f58a 100755
--- a/dry/main.cpp
+++ b/dry/main.cpp
@@ -7,8 +7,8 @@ using std::cout, std::endl;
 
 int main() {
 
-    Pirate luffy("Luffy");
-    Pirate zoro("Zoro");
+    Pirate luffy("Luffy",1000000);
+    Pirate zoro("Zoro",500000);
 
     const int crewSize = 2;
     

commit 67a992620c204243a3c94749804df35fcebbf6d3
Author: Baraa Egbaria <mohammadegbaria@Mohammads-MacBook-Pro.local>
Date:   Fri Dec 13 02:44:01 2024 +0200

    [Feature] Add devil fruit feature

diff --git a/dry/Pirate.cpp b/dry/Pirate.cpp
index c96892e..fc3c314 100755
--- a/dry/Pirate.cpp
+++ b/dry/Pirate.cpp
@@ -2,7 +2,7 @@
 #include "Pirate.h"
 
 
-Pirate::Pirate(const string& name): name(name) {}
+Pirate::Pirate(const string& name, DEVIL_FRUIT devilFruit): name(name), devilFruit(devilFruit) {}
 
 
 void Pirate::setName(const string& name){
@@ -10,12 +10,32 @@ void Pirate::setName(const string& name){
 }
 
 
+void Pirate::setDevilFruit(DEVIL_FRUIT devilFruit){
+    this->devilFruit = devilFruit;
+}
+
+
 std::string Pirate::getName(){
     return name;
 }
 
 
+DEVIL_FRUIT Pirate::getDevilFruit(){
+    return devilFruit;
+}
+
+
+const char* const devilFruitNames[] = {
+    "Gum Gum",
+    "Smoke Smoke",
+    "Flame Flame",
+    "Rumble Rumble",
+    "String String",
+    "Ice Ice",
+    "None"
+};
+
 std::ostream &operator<<(std::ostream &os, const Pirate &pirate){
-    os << pirate.name;
+    os << pirate.name << " (Devil Fruit: " << devilFruitNames[pirate.devilFruit] << ")";
     return os;
 }
diff --git a/dry/Pirate.h b/dry/Pirate.h
index 7769667..4c044b1 100755
--- a/dry/Pirate.h
+++ b/dry/Pirate.h
@@ -5,18 +5,31 @@
 
 using std::string;
 
+enum DEVIL_FRUIT {
+    GUM_GUM_FRUIT,
+    SMOKE_SMOKE_FRUIT,
+    FLAME_FLAME_FRUIT,
+    RUMBLE_RUMBLE_FRUIT,
+    STRING_STRING_FRUIT,
+    ICE_ICE_FRUIT,
+    NONE
+};
+
 class Pirate {
 private:
     string name;
+    DEVIL_FRUIT devilFruit;
 
 public:
-    Pirate(const string& name);
+    Pirate(const string& name, DEVIL_FRUIT devilFruit = DEVIL_FRUIT::NONE);
 
     ~Pirate() = default;
 
     void setName(const string& name);
+    void setDevilFruit(DEVIL_FRUIT devilFruit);
 
     string getName();
+    DEVIL_FRUIT getDevilFruit();
 
     friend std::ostream &operator<<(std::ostream &os, const Pirate &pirate);
 };
diff --git a/dry/main.cpp b/dry/main.cpp
index 6b659a1..2911f71 100755
--- a/dry/main.cpp
+++ b/dry/main.cpp
@@ -7,7 +7,7 @@ using std::cout, std::endl;
 
 int main() {
 
-    Pirate luffy("Luffy");
+    Pirate luffy("Luffy", GUM_GUM_FRUIT);
     Pirate zoro("Zoro");
 
     const int crewSize = 2;

commit 74f6b97bc53ce50d65642ddedae20581be903ddf
Author: Baraa Egbaria <mohammadegbaria@Mohammads-MacBook-Pro.local>
Date:   Fri Dec 13 02:41:38 2024 +0200

    Initial Commit

diff --git a/README.md b/README.md
new file mode 100644
index 0000000..0a4b9a1
--- /dev/null
+++ b/README.md
@@ -0,0 +1,7 @@
+# Matam Homework 2
+
+This repository contains all supplied files for the second homework assignment in the course "Introduction to Systems Programming" (234124) at the Technion.
+
+You may find the full instructions for this assignment on the [course's website](https://webcourse.cs.technion.ac.il/02340124/Winter2024-2025).
+
+Good luck and have fun!
diff --git a/dry/Pirate.cpp b/dry/Pirate.cpp
new file mode 100755
index 0000000..c96892e
--- /dev/null
+++ b/dry/Pirate.cpp
@@ -0,0 +1,21 @@
+
+#include "Pirate.h"
+
+
+Pirate::Pirate(const string& name): name(name) {}
+
+
+void Pirate::setName(const string& name){
+    this->name = name;
+}
+
+
+std::string Pirate::getName(){
+    return name;
+}
+
+
+std::ostream &operator<<(std::ostream &os, const Pirate &pirate){
+    os << pirate.name;
+    return os;
+}
diff --git a/dry/Pirate.h b/dry/Pirate.h
new file mode 100755
index 0000000..7769667
--- /dev/null
+++ b/dry/Pirate.h
@@ -0,0 +1,22 @@
+
+#pragma once
+
+#include <iostream>
+
+using std::string;
+
+class Pirate {
+private:
+    string name;
+
+public:
+    Pirate(const string& name);
+
+    ~Pirate() = default;
+
+    void setName(const string& name);
+
+    string getName();
+
+    friend std::ostream &operator<<(std::ostream &os, const Pirate &pirate);
+};
diff --git a/dry/main.cpp b/dry/main.cpp
new file mode 100755
index 0000000..6b659a1
--- /dev/null
+++ b/dry/main.cpp
@@ -0,0 +1,25 @@
+#include <iostream>
+#include "Pirate.h"
+#include <cstring>
+
+using std::cout, std::endl;
+
+
+int main() {
+
+    Pirate luffy("Luffy");
+    Pirate zoro("Zoro");
+
+    const int crewSize = 2;
+    
+    Pirate strawHatCrew[2];
+    strawHatCrew[0] = luffy;
+    strawHatCrew[1] = zoro;
+    
+    cout << "Straw Hat crew contains:" << endl;
+    for (int i = 0; i < crewSize; i++) {
+        cout << strawHatCrew[i] << endl;
+    }
+
+    return 0;
+}
diff --git a/wet/Utilities.cpp b/wet/Utilities.cpp
new file mode 100755
index 0000000..c35944f
--- /dev/null
+++ b/wet/Utilities.cpp
@@ -0,0 +1,23 @@
+
+#include "Utilities.h"
+
+#include <iostream>
+
+using std::cerr;
+
+
+void exitWithError(MatamErrorType error) {
+    std::cerr << "Matam Error: ";
+    switch (error) {
+        case MatamErrorType::UnmatchedSizes:
+            std::cerr << "Unmatched matrices" << std::endl;
+            break;
+        case MatamErrorType::OutOfBounds:
+            std::cerr << "Out of bounds" << std::endl;
+            break;
+        case MatamErrorType::NotSquareMatrix:
+            std::cerr << "Matrix must be square to calculate determinant" << std::endl;
+            break;
+    }
+    exit(1);
+}
diff --git a/wet/Utilities.h b/wet/Utilities.h
new file mode 100755
index 0000000..c07958d
--- /dev/null
+++ b/wet/Utilities.h
@@ -0,0 +1,10 @@
+
+#pragma once
+
+enum class MatamErrorType {
+    UnmatchedSizes,
+    OutOfBounds,
+    NotSquareMatrix
+};
+
+void exitWithError(MatamErrorType error);
diff --git a/wet/test.expected b/wet/test.expected
new file mode 100755
index 0000000..d107ab8
--- /dev/null
+++ b/wet/test.expected
@@ -0,0 +1,19 @@
+|5|6|
+|7|8|
+
+Movie Name: MataMatrix
+Author: Baraa Egbaria
+
+Frame 0:
+|1|2|
+|3|4|
+
+Frame 1:
+|5|6|
+|7|8|
+
+Frame 2:
+|1|2|
+|3|4|
+
+-----End of Movie-----
diff --git a/wet/tests.cpp b/wet/tests.cpp
new file mode 100755
index 0000000..d8bc5a7
--- /dev/null
+++ b/wet/tests.cpp
@@ -0,0 +1,130 @@
+
+
+#include <string>
+#include <iostream>
+
+#include "Matrix.h"
+#include "MataMvidia.h"
+
+using namespace std;
+typedef bool (*testFunc)(void);
+
+bool testMatrix(std::ostream& out);
+bool testMataMvidia(std::ostream& out);
+
+
+#define ASSERT_TEST(expr)                                                      \
+do {                                                                           \
+    if (!(expr)) {                                                             \
+        std::cout << "\nAssertion failed at ";                                 \
+        std::cout << __FILE__ << ":" << __LINE__ << ": " << #expr << std::endl;\
+        exit(1);                                                               \
+    }                                                                          \
+} while (0)
+
+
+int main() {
+    testMatrix(std::cout);
+    testMataMvidia(std::cout);
+    return 0;
+}
+
+bool testMatrix(std::ostream& out) {
+    Matrix m1(2,2);
+    Matrix m2(2,2);
+
+    m1(0,0) = 1;
+    m1(0,1) = 2;
+    m1(1,0) = 3;
+    m1(1,1) = 4;
+
+    m2(0,0) = 5;
+    m2(0,1) = 6;
+    m2(1,0) = 7;
+    m2(1,1) = 8;
+
+    Matrix m3 = m1 + m2;
+    ASSERT_TEST(m3(0,0) == 6);
+    ASSERT_TEST(m3(0,1) == 8);
+    ASSERT_TEST(m3(1,0) == 10);
+    ASSERT_TEST(m3(1,1) == 12);
+
+    Matrix m4 = m1 * m2;
+    m4 *= 1;
+    ASSERT_TEST(m4(0,0) == 19);
+    ASSERT_TEST(m4(0,1) == 22);
+    ASSERT_TEST(m4(1,0) == 43);
+    ASSERT_TEST(m4(1,1) == 50);
+
+    m1 += m2;
+    m1 *= m2;
+    m1 -= m2;
+    m1 = m3 - m2;
+
+    ASSERT_TEST(-m1 == -1*m1);
+    ASSERT_TEST(-m1 == m1*-1);
+
+    ASSERT_TEST(m2.rotateClockwise().rotateCounterClockwise() == m2);
+
+    ASSERT_TEST(m1.transpose().transpose() == m1);
+
+    out << m2 << std::endl;
+
+    return true;
+}
+
+bool testMataMvidia(std::ostream& out) {
+    Matrix frame1(2,2);
+    Matrix frame2(2,2);
+
+    frame1(0,0) = 1;
+    frame1(0,1) = 2;
+    frame1(1,0) = 3;
+    frame1(1,1) = 4;
+
+    frame2(0,0) = 5;
+    frame2(0,1) = 6;
+    frame2(1,0) = 7;
+    frame2(1,1) = 8;
+
+    Matrix array[2];
+    array[0] = frame1;
+    array[1] = frame2;
+
+    MataMvidia movie("MataMatrix","Baraa Egbaria",array, 2);
+
+    ASSERT_TEST(movie[0] == frame1);
+
+    movie += frame1;
+
+    ASSERT_TEST(movie[2] == frame1);
+
+    Matrix frame01(2,2);
+    Matrix frame11(2,2);
+
+    frame01(0,0) = 10;
+    frame01(0,1) = 20;
+    frame01(1,0) = 30;
+    frame01(1,1) = 40;
+
+    frame11(0,0) = 50;
+    frame11(0,1) = 60;
+    frame11(1,0) = 70;
+    frame11(1,1) = 80;
+
+    Matrix array1[2];
+    array1[0] = frame01;
+    array1[1] = frame11;
+
+    MataMvidia movie1("MataMatrix and the chamber of secrets","Baraa Egbaria",array1, 2);
+
+    ASSERT_TEST(movie1[0] == frame01);
+
+    //test output
+    out << movie;
+
+    MataMvidia movie2 = movie + movie1;
+    movie += movie1;
+
+    return true;
+}
